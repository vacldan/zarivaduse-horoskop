import streamlit as st
import requests
import datetime
import json
from urllib.parse import urlencode
import time

# Konstanty pro API
PROKERALA_CLIENT_ID = "a299b037-8f17-4973-94ec-2ff6181170c9"
PROKERALA_CLIENT_SECRET = "uDo6680pyltTVtUI5Wu9q16sHUoeScGTsz5UunYr"
API_BASE_URL = "https://api.prokerala.com/v2/astrology"

def get_access_token():
    """Z√≠sk√° p≈ô√≠stupov√Ω token pro Prokerala API"""
    url = "https://api.prokerala.com/token"
    data = {
        "grant_type": "client_credentials",
        "client_id": PROKERALA_CLIENT_ID,
        "client_secret": PROKERALA_CLIENT_SECRET,
    }
    
    try:
        response = requests.post(url, data=data, timeout=30)
        response.raise_for_status()
        
        token_data = response.json()
        if "access_token" in token_data:
            return token_data["access_token"]
        else:
            st.error("Neplatn√° odpovƒõƒè p≈ôi z√≠sk√°v√°n√≠ tokenu")
            return None
            
    except requests.exceptions.RequestException as e:
        st.error(f"Chyba p≈ôi p≈ôipojen√≠ k API: {e}")
        return None
    except json.JSONDecodeError:
        st.error("Neplatn√° JSON odpovƒõƒè p≈ôi z√≠sk√°v√°n√≠ tokenu")
        return None

def call_prokerala_api(endpoint, params):
    """Vol√° Prokerala API s dan√Ωmi parametry"""
    token = get_access_token()
    if not token:
        return None
        
    headers = {
        "Authorization": f"Bearer {token}",
    }
    
    url = f"{API_BASE_URL}{endpoint}?{urlencode(params)}"
    
    try:
        response = requests.get(url, headers=headers, timeout=30)
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Chyba API (Status {response.status_code}): {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        st.error(f"Chyba p≈ôi vol√°n√≠ API: {e}")
        return None
    except json.JSONDecodeError:
        st.error("Neplatn√° JSON odpovƒõƒè z API")
        return None

def validate_datetime(datum, cas):
    """Validuje datum a ƒças"""
    try:
        datetime.datetime.strptime(f"{datum} {cas}", "%Y-%m-%d %H:%M")
        return True
    except ValueError:
        return False

def format_datetime_for_api(datum, cas, timezone="Europe/Prague"):
    """Form√°tuje datetime pro API ve spr√°vn√©m form√°tu"""
    try:
        dt = datetime.datetime.strptime(f"{datum} {cas}", "%Y-%m-%d %H:%M")
        return dt.strftime("%Y-%m-%dT%H:%M:%S") + "+01:00"
    except ValueError:
        return None

def create_planet_table(planet_data):
    """Vytvo≈ô√≠ tabulku planet s korekc√≠ na tropickou astrologii"""
    
    st.subheader("üìã Tabulka planet")
    
    # Kontrola struktury dat
    if isinstance(planet_data, dict) and "planet_position" in planet_data:
        planets_list = planet_data["planet_position"]
    elif isinstance(planet_data, list):
        planets_list = planet_data
    else:
        st.error("Neoƒçek√°van√° struktura dat pro planety")
        return
    
    # Symboly planet
    planet_symbols = {
        "Sun": "‚òâ", "Moon": "‚òΩ", "Mercury": "‚òø", "Venus": "‚ôÄ", "Mars": "‚ôÇ",
        "Jupiter": "‚ôÉ", "Saturn": "‚ôÑ", "Uranus": "‚ôÖ", "Neptune": "‚ôÜ", "Pluto": "‚ôá",
        "Ascendant": "ASC", "Rahu": "‚òä", "Ketu": "‚òã"
    }
    
    # Z√°padn√≠ znamen√≠
    zodiac_signs = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo",
                   "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"]
    
    # KL√çƒåOV√Å OPRAVA: Ayanamsa pro konverzi vedick√©->tropick√©
    ayanamsa_1988 = 23.9
    
    # P≈ôevod do tabulky
    table_data = []
    
    for planet in planets_list:
        if isinstance(planet, dict):
            name = planet.get("name", "Unknown")
            symbol = planet_symbols.get(name, "")
            
            # Vedick√° longitude z API
            vedic_longitude = planet.get("longitude", 0)
            
            # KONVERZE NA TROPICKOU: P≈ôid√°me ayanamsa
            tropical_longitude = vedic_longitude + ayanamsa_1988
            if tropical_longitude >= 360:
                tropical_longitude -= 360
            
            # Z√°padn√≠ znamen√≠ podle tropick√© longitude
            sign_index = int(tropical_longitude // 30)
            western_sign = zodiac_signs[sign_index] if 0 <= sign_index < 12 else "Unknown"
            
            # Stupe≈à v r√°mci tropick√©ho znamen√≠
            degree_in_sign = tropical_longitude % 30
            deg_int = int(degree_in_sign)
            minutes = int((degree_in_sign - deg_int) * 60)
            degree_formatted = f"{deg_int}¬∞{minutes:02d}'"
            
            # D≈Øm
            house = planet.get("position", planet.get("house", "N/A"))
            
            # Retrogr√°dn√≠ pohyb
            is_retrograde = planet.get("is_retrograde", planet.get("retrograde", False))
            motion = "Retrograde" if is_retrograde else "Direct"
            
            table_data.append({
                "Planet": f"{symbol} {name}",
                "Sign": western_sign,
                "Degree": degree_formatted,
                "House": str(house),
                "Motion": motion
            })
    
    if table_data:
        import pandas as pd
        df = pd.DataFrame(table_data)
        
        st.dataframe(df, use_container_width=True, hide_index=True)
        
        # Statistiky
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Celkem planet", len(table_data))
        
        with col2:
            retrograde_count = sum(1 for row in table_data if "Retrograde" in row["Motion"])
            st.metric("Retrogr√°dn√≠", retrograde_count)
        
        with col3:
            direct_count = len(table_data) - retrograde_count
            st.metric("P≈ô√≠m√Ω pohyb", direct_count)
        
        # Retrogr√°dn√≠ planety
        if retrograde_count > 0:
            retrograde_planets = [row["Planet"] for row in table_data if "Retrograde" in row["Motion"]]
            st.warning(f"‚ö†Ô∏è Retrogr√°dn√≠ planety: {', '.join(retrograde_planets)}")

def create_chart_visualization(planet_data):
    """Vytvo≈ô√≠ kr√°snou vizualizaci astrologick√©ho kruhu"""
    
    st.subheader("üîÆ Astrologick√Ω kruh")
    
    try:
        import matplotlib.pyplot as plt
        import numpy as np
        
        # Z√≠sk√°me data o planet√°ch
        if isinstance(planet_data, dict) and "planet_position" in planet_data:
            planets_list = planet_data["planet_position"]
        else:
            st.info("Vizualizace nen√≠ dostupn√° pro tuto strukturu dat")
            return
        
        # Nastaven√≠ stylu
        plt.style.use('default')
        fig, ax = plt.subplots(figsize=(10, 10), subplot_kw=dict(projection='polar'))
        fig.patch.set_facecolor('white')
        
        # Nastaven√≠ kruhu
        ax.set_theta_zero_location('E')  # 0¬∞ na v√Ωchodƒõ (Aries)
        ax.set_theta_direction(-1)  # Proti smƒõru hodinov√Ωch ruƒçiƒçek
        
        # Znamen√≠ a jejich barvy
        zodiac_signs = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo",
                       "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"]
        
        sign_colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD',
                      '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9', '#F8C471', '#82E0AA']
        
        # Pozice znamen√≠ (ka≈æd√© znamen√≠ m√° 30¬∞)
        sign_positions = np.linspace(0, 2*np.pi, 13)[:-1]
        
        # Vykreslen√≠ segment≈Ø znamen√≠
        for i, (sign, color) in enumerate(zip(zodiac_signs, sign_colors)):
            theta_start = sign_positions[i] - np.pi/12
            theta_end = sign_positions[i] + np.pi/12
            theta_segment = np.linspace(theta_start, theta_end, 50)
            
            # Lehk√Ω barevn√Ω segment pro ka≈æd√© znamen√≠
            ax.fill_between(theta_segment, 0.8, 1.2, alpha=0.15, color=color)
        
        # Barvy planet
        planet_colors = {
            "Sun": "#FFD700", "Moon": "#C0C0C0", "Mercury": "#FFA500", "Venus": "#FF69B4", 
            "Mars": "#FF4500", "Jupiter": "#8A2BE2", "Saturn": "#2F4F4F", 
            "Uranus": "#4FD0E3", "Neptune": "#4169E1", "Pluto": "#8B4513",
            "Ascendant": "#000000", "Rahu": "#708090", "Ketu": "#696969"
        }
        
        # Symboly planet
        symbols = {"Sun": "‚òâ", "Moon": "‚òΩ", "Mercury": "‚òø", "Venus": "‚ôÄ", 
                  "Mars": "‚ôÇ", "Jupiter": "‚ôÉ", "Saturn": "‚ôÑ", "Uranus": "‚ôÖ",
                  "Neptune": "‚ôÜ", "Pluto": "‚ôá", "Ascendant": "ASC", "Rahu": "‚òä", "Ketu": "‚òã"}
        
        # Vykreslen√≠ planet s tropickou korekc√≠
        ayanamsa_1988 = 23.9  # Ayanamsa pro rok 1988
        
        for planet in planets_list:
            if isinstance(planet, dict):
                name = planet.get("name", "")
                vedic_longitude = planet.get("longitude", 0)
                
                # KONVERZE: Vedick√° -> Tropick√° longitude
                tropical_longitude = vedic_longitude + ayanamsa_1988
                if tropical_longitude >= 360:
                    tropical_longitude -= 360
                
                # P≈ôevod na radi√°ny
                theta = np.radians(tropical_longitude)
                
                # Symbol a barva planety
                symbol = symbols.get(name, name[:3])
                color = planet_colors.get(name, "#333333")
                
                # Vykreslen√≠ planety
                ax.plot(theta, 1, 'o', markersize=15, color=color, markeredgecolor='white', markeredgewidth=2)
                ax.text(theta, 1.15, symbol, ha='center', va='center', fontsize=12, fontweight='bold', color='black')
                
                # P≈ôid√°me stupnƒõ pro d≈Øle≈æit√© planety
                if name in ["Sun", "Moon", "Ascendant"]:
                    degree = tropical_longitude % 30
                    ax.text(theta, 0.85, f"{degree:.0f}¬∞", ha='center', va='center', fontsize=9, color='gray')
        
        # Oznaƒçen√≠ znamen√≠
        for i, sign in enumerate(zodiac_signs):
            ax.text(sign_positions[i], 1.35, sign, ha='center', va='center', 
                   fontsize=11, fontweight='bold', color='#2C3E50')
        
        # Oznaƒçen√≠ stup≈à≈Ø
        degree_positions = np.arange(0, 360, 30)
        for deg in degree_positions:
            theta_deg = np.radians(deg)
            ax.text(theta_deg, 1.45, f"{deg}¬∞", ha='center', va='center', 
                   fontsize=8, alpha=0.6, color='#7F8C8D')
        
        # Nastaven√≠ os
        ax.set_ylim(0, 1.6)
        ax.set_rticks([])
        ax.grid(True, alpha=0.3)
        ax.set_title("Astrologick√Ω kruh - Pozice planet", fontsize=14, fontweight='bold', pad=20)
        
        # Zobraz graf
        st.pyplot(fig)
        plt.close()
        
        # P≈ôidej textovou reprezentaci pod graf
        display_text_chart(planet_data)
        
    except ImportError:
        st.warning("‚ö†Ô∏è Matplotlib nen√≠ dostupn√Ω pro vizualizaci kruhu.")
        display_text_chart(planet_data)
    except Exception as e:
        st.error(f"Chyba p≈ôi vytv√°≈ôen√≠ vizualizace: {e}")
        display_text_chart(planet_data)

def display_text_chart(planet_data):
    """Zobraz√≠ textovou reprezentaci astrologick√©ho kruhu s tropickou korekc√≠"""
    
    if isinstance(planet_data, dict) and "planet_position" in planet_data:
        planets_list = planet_data["planet_position"]
    else:
        return
    
    zodiac_signs = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo",
                   "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"]
    
    # Seskupen√≠ planet podle tropick√Ωch znamen√≠
    signs_with_planets = {}
    ayanamsa_1988 = 23.9  # Ayanamsa pro rok 1988
    
    for planet in planets_list:
        if isinstance(planet, dict):
            name = planet.get("name", "")
            vedic_longitude = planet.get("longitude", 0)
            
            # P≈ôevod na tropickou longitude
            tropical_longitude = vedic_longitude + ayanamsa_1988
            if tropical_longitude >= 360:
                tropical_longitude -= 360
                
            sign_index = int(tropical_longitude // 30)
            
            if 0 <= sign_index < 12:
                sign = zodiac_signs[sign_index]
                degree = tropical_longitude % 30
                
                if sign not in signs_with_planets:
                    signs_with_planets[sign] = []
                
                signs_with_planets[sign].append(f"{name} ({degree:.1f}¬∞)")
    
    # Zobrazen√≠
    st.write("**Rozlo≈æen√≠ planet ve znamen√≠ch (Tropick√° astrologie):**")
    for sign in zodiac_signs:
        if sign in signs_with_planets:
            planets_str = ", ".join(signs_with_planets[sign])
            st.write(f"**{sign}:** {planets_str}")
        else:
            st.write(f"**{sign}:** (pr√°zdn√©)")

def display_houses(planet_data):
    """Zobraz√≠ informace o astrologick√Ωch domech"""
    
    st.subheader("üè† Astrologick√© domy")
    
    # Pokus√≠me se vypoƒç√≠tat domy z Ascendentu
    if isinstance(planet_data, dict) and "planet_position" in planet_data:
        planets_list = planet_data["planet_position"]
        ascendant_longitude = None
        
        # Najdeme Ascendent
        for planet in planets_list:
            if isinstance(planet, dict) and planet.get("name") == "Ascendant":
                ascendant_longitude = planet.get("longitude", 0)
                break
        
        if ascendant_longitude is not None:
            zodiac_signs = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo",
                           "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"]
            
            house_meanings = [
                "Osobnost, J√°, vzhled, identita",
                "Majetek, hodnoty, pen√≠ze, hmotn√© jistoty", 
                "Komunikace, sourozenci, kr√°tk√© cesty, vzdƒõl√°n√≠",
                "Domov, rodina, ko≈ôeny, bydlen√≠",
                "Kreativita, dƒõti, l√°ska, z√°bava",
                "Zdrav√≠, pr√°ce, slu≈æba, denn√≠ rutina",
                "Partnerstv√≠, man≈æelstv√≠, vztahy, nep≈ô√°tel√©",
                "Transformace, smrt, okultno, spoleƒçn√© finance",
                "Filozofie, cestov√°n√≠, vzdƒõl√°n√≠, v√≠ra", 
                "Kari√©ra, postaven√≠, reputace, c√≠le",
                "P≈ô√°tel√©, nadƒõje, skupiny, ide√°ly",
                "Tajnosti, spiritualita, vƒõzen√≠, nep≈ô√°tel√©"
            ]
            
            col1, col2 = st.columns(2)
            
            for i in range(12):
                house_longitude = (ascendant_longitude + (i * 30)) % 360
                sign_index = int(house_longitude // 30)
                sign = zodiac_signs[sign_index]
                degree = house_longitude % 30
                meaning = house_meanings[i]
                
                with col1 if i % 2 == 0 else col2:
                    st.write(f"**{i+1}. d≈Øm:** {sign} {degree:.0f}¬∞")
                    st.write(f"   _{meaning}_")
                    st.write("---")
            
            # P≈ôid√°me informaci o planet√°ch v domech
            st.subheader("ü™ê Planety v domech")
            
            # Seskup√≠me planety podle dom≈Ø
            houses_with_planets = {}
            
            for planet in planets_list:
                if isinstance(planet, dict):
                    name = planet.get("name", "")
                    house_num = planet.get("position", 0)
                    
                    if house_num and house_num != "N/A":
                        house_num = int(house_num) if isinstance(house_num, str) and house_num.isdigit() else house_num
                        
                        if house_num not in houses_with_planets:
                            houses_with_planets[house_num] = []
                        
                        houses_with_planets[house_num].append(name)
            
            if houses_with_planets:
                col1, col2 = st.columns(2)
                
                for house_num in sorted(houses_with_planets.keys()):
                    if isinstance(house_num, int) and 1 <= house_num <= 12:
                        planets_in_house = houses_with_planets[house_num]
                        meaning = house_meanings[house_num - 1] if house_num <= len(house_meanings) else "N/A"
                        
                        with col1 if house_num % 2 == 1 else col2:
                            st.write(f"**{house_num}. d≈Øm:** {', '.join(planets_in_house)}")
                            st.write(f"   _{meaning.split(',')[0]}_")
                            st.write("---")
            else:
                st.info("Informace o pozic√≠ch planet v domech nejsou v API dostupn√©")
        else:
            display_house_meanings_only()
    else:
        display_house_meanings_only()

def display_house_meanings_only():
    """Zobraz√≠ pouze v√Ωznamy dom≈Ø jako fallback"""
    
    house_meanings = [
        ("1. d≈Øm (Ascendant)", "Osobnost, J√°, vzhled, identita, prvn√≠ dojem"),
        ("2. d≈Øm", "Majetek, hodnoty, pen√≠ze, hmotn√© jistoty, sebehodnocen√≠"), 
        ("3. d≈Øm", "Komunikace, sourozenci, kr√°tk√© cesty, m√≠stn√≠ prost≈ôed√≠"),
        ("4. d≈Øm (IC)", "Domov, rodina, ko≈ôeny, bydlen√≠, soukrom√≠"),
        ("5. d≈Øm", "Kreativita, dƒõti, l√°ska, z√°bava, kon√≠ƒçky"),
        ("6. d≈Øm", "Zdrav√≠, pr√°ce, slu≈æba, denn√≠ rutina, zv√≠≈ôata"),
        ("7. d≈Øm (Descendant)", "Partnerstv√≠, man≈æelstv√≠, vztahy, otev≈ôen√≠ nep≈ô√°tel√©"),
        ("8. d≈Øm", "Transformace, smrt, okultno, spoleƒçn√© finance, dƒõdictv√≠"),
        ("9. d≈Øm", "Filozofie, cestov√°n√≠, vzdƒõl√°n√≠, v√≠ra, z√°kon"), 
        ("10. d≈Øm (MC)", "Kari√©ra, postaven√≠, reputace, c√≠le, spoleƒçensk√Ω status"),
        ("11. d≈Øm", "P≈ô√°tel√©, nadƒõje, skupiny, ide√°ly, p≈ô√°n√≠"),
        ("12. d≈Øm", "Tajnosti, spiritualita, vƒõzen√≠, skryt√© nep≈ô√°tel√©, podvƒõdom√≠")
    ]
    
    st.info("V√Ωznamy astrologick√Ωch dom≈Ø:")
    
    col1, col2 = st.columns(2)
    
    for i, (house, meaning) in enumerate(house_meanings):
        with col1 if i % 2 == 0 else col2:
            st.write(f"**{house}**")
            st.write(f"_{meaning}_")
            st.write("---")

def display_additional_info(birth_data):
    """Zobraz√≠ dodateƒçn√© informace z birth-details"""
    
    st.subheader("‚ÑπÔ∏è Dodateƒçn√© informace")
    
    # Pouze z√°kladn√≠ informace, ne vedick√©
    if isinstance(birth_data, dict):
        col1, col2 = st.columns(2)
        
        basic_info = ["birth_time", "sunrise", "sunset", "day_duration", "night_duration"]
        
        with col1:
            for field in basic_info[:3]:
                if field in birth_data:
                    label = field.replace('_', ' ').title()
                    st.write(f"**{label}:** {birth_data[field]}")
        
        with col2:
            for field in basic_info[3:]:
                if field in birth_data:
                    label = field.replace('_', ' ').title()
                    st.write(f"**{label}:** {birth_data[field]}")

def display_horoscope_results(all_data):
    """Zobraz√≠ v√Ωsledky horoskopu - kombinuje data z v√≠ce zdroj≈Ø"""
    
    st.header("üåü V√°≈° astrologick√Ω horoskop")
    
    # Kombinujeme data z v√≠ce zdroj≈Ø pro kompletn√≠ planety
    combined_planet_data = None
    
    # Priorita: planet-position > kundli > birth-details
    for key in ["/planet-position", "/kundli", "/birth-details"]:
        if key in all_data:
            data = all_data[key]
            if isinstance(data, dict) and ("planet_position" in data or "planets" in data):
                combined_planet_data = data
                break
    
    if combined_planet_data:
        # Tabulka planet
        create_planet_table(combined_planet_data)
        
        # Kruhov√Ω astrologick√Ω diagram
        create_chart_visualization(combined_planet_data)
        
        # Astrologick√© domy
        display_houses(combined_planet_data)
        
        # Aspekty (pokud jsou dostupn√©)
        if "aspects" in combined_planet_data:
            st.subheader("üîó Planet√°rn√≠ aspekty")
            display_aspects(combined_planet_data)
    
    # Dodateƒçn√© informace z birth-details (pouze z√°kladn√≠ ƒçasov√© info)
    birth_data = all_data.get("/birth-details")
    if birth_data and birth_data != combined_planet_data:
        # Zobraz√≠me jen z√°kladn√≠ ƒçasov√© informace, ne vedick√©
        if isinstance(birth_data, dict):
            basic_fields = ["birth_time", "sunrise", "sunset", "day_duration", "night_duration"]
            has_basic = any(field in birth_data for field in basic_fields)
            
            if has_basic:
                st.subheader("‚ÑπÔ∏è Informace o dni")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if "sunrise" in birth_data:
                        st.write(f"**V√Ωchod slunce:** {birth_data['sunrise']}")
                    if "day_duration" in birth_data:
                        st.write(f"**D√©lka dne:** {birth_data['day_duration']}")
                
                with col2:
                    if "sunset" in birth_data:
                        st.write(f"**Z√°pad slunce:** {birth_data['sunset']}")
                    if "night_duration" in birth_data:
                        st.write(f"**D√©lka noci:** {birth_data['night_duration']}")

def display_aspects(planet_data):
    """Zobraz√≠ planet√°rn√≠ aspekty pokud jsou dostupn√©"""
    
    aspects_data = planet_data.get("aspects", [])
    
    if aspects_data and isinstance(aspects_data, list):
        st.info("**Hlavn√≠ planet√°rn√≠ aspekty:**")
        
        # Symboly aspekt≈Ø
        aspect_symbols = {
            "conjunction": "‚òå", "opposition": "‚òç", "trine": "‚ñ≥", 
            "square": "‚ñ°", "sextile": "‚öπ", "quincunx": "‚öª"
        }
        
        # Symboly planet
        planet_symbols = {
            "Sun": "‚òâ", "Moon": "‚òΩ", "Mercury": "‚òø", "Venus": "‚ôÄ", "Mars": "‚ôÇ",
            "Jupiter": "‚ôÉ", "Saturn": "‚ôÑ", "Ascendant": "ASC"
        }
        
        col1, col2 = st.columns(2)
        
        for i, aspect in enumerate(aspects_data):
            if isinstance(aspect, dict):
                planet1 = aspect.get("planet1", "")
                planet2 = aspect.get("planet2", "")
                aspect_type = aspect.get("type", aspect.get("aspect", ""))
                orb = aspect.get("orb", "")
                
                # Symboly
                p1_symbol = planet_symbols.get(planet1, planet1[:3])
                p2_symbol = planet_symbols.get(planet2, planet2[:3])
                aspect_symbol = aspect_symbols.get(aspect_type.lower(), aspect_type)
                
                with col1 if i % 2 == 0 else col2:
                    st.write(f"**{p1_symbol} {aspect_symbol} {p2_symbol}**")
                    st.write(f"_{planet1} {aspect_type} {planet2}_")
                    if orb:
                        st.write(f"Orb: {orb}¬∞")
                    st.write("---")
    else:
        st.info("Informace o aspektech nejsou v API dostupn√©")
        st.write("""
        **Hlavn√≠ aspekty v astrologii:**
        - **Konjunkce (0¬∞)** - spojen√≠ energi√≠
        - **Opozice (180¬∞)** - napƒõt√≠, polarita  
        - **Trigon (120¬∞)** - harmonie, tok energie
        - **Kvadr√°t (90¬∞)** - v√Ωzva, dynamick√© napƒõt√≠
        - **Sextil (60¬∞)** - p≈ô√≠le≈æitost, podpora
        - **Quincunx (150¬∞)** - adjustace, nejistota
        """)

# Konfigurace str√°nky
st.set_page_config(page_title="Z√°≈ôiv√° du≈°e ‚Ä¢ Astrologick√Ω horoskop", layout="centered")

# Hlaviƒçka
st.markdown("""
    <h1 style='text-align: center; color: #33cfcf;'>Z√°≈ôiv√° du≈°e ‚Ä¢ Astrologick√Ω horoskop</h1>
    <h3 style='text-align: center; color: #33cfcf;'>Va≈°e hvƒõzdn√° mapa narozen√≠</h3>
""", unsafe_allow_html=True)

# Jednoduch√Ω formul√°≈ô
with st.form("astro_form"):
    datum = st.text_input("Datum narozen√≠ (YYYY-MM-DD)", value="1990-01-01")
    cas = st.text_input("ƒåas narozen√≠ (HH:MM)", value="12:00")
    
    mesto = st.selectbox("Mƒõsto narozen√≠", [
        "Praha", "Brno", "Ostrava", "Plze≈à", "Liberec", "Olomouc", "√öst√≠ nad Labem", 
        "Hradec Kr√°lov√©", "ƒåesk√© Budƒõjovice", "Pardubice", "Zl√≠n", "Hav√≠≈ôov", 
        "Kladno", "Most", "Opava", "Fr√Ωdek-M√≠stek", "Karvin√°", "Jihlava", 
        "Teplice", "Dƒõƒç√≠n", "Karlovy Vary", "Jablonec nad Nisou", "Mlad√° Boleslav",
        "Prostƒõjov", "P≈ôerov", "ƒåesk√° L√≠pa", "T≈ôeb√≠ƒç", "Uhersk√© Hradi≈°tƒõ",
        "Trutnov", "Chomutov", "Kol√≠n", "Jirkov", "√öst√≠ nad Orlic√≠",
        "Bratislava", "Ko≈°ice", "Pre≈°ov", "≈Ωilina", "Bansk√° Bystrica", "Nitra",
        "Trnava", "Martin", "Trenƒç√≠n", "Poprad", "Prievidza", "Zvolen",
        "Pova≈æsk√° Bystrica", "Michalovce", "Spi≈°sk√° Nov√° Ves", "Kom√°rno",
        "Levice", "Humenn√©", "Bardejov", "Liptovsk√Ω Mikul√°≈°"
    ])

    # P≈ôesn√© geolokaƒçn√≠ data s ƒçasov√Ωmi p√°smy
    geolokace = {
        "Praha": {"latitude": 50.0755, "longitude": 14.4378, "timezone": "Europe/Prague"},
        "Brno": {"latitude": 49.1951, "longitude": 16.6068, "timezone": "Europe/Prague"},
        "Ostrava": {"latitude": 49.8209, "longitude": 18.2625, "timezone": "Europe/Prague"},
        "Plze≈à": {"latitude": 49.7384, "longitude": 13.3736, "timezone": "Europe/Prague"},
        "Liberec": {"latitude": 50.7663, "longitude": 15.0543, "timezone": "Europe/Prague"},
        "Olomouc": {"latitude": 49.5938, "longitude": 17.2509, "timezone": "Europe/Prague"},
        "√öst√≠ nad Labem": {"latitude": 50.6607, "longitude": 14.0322, "timezone": "Europe/Prague"},
        "Hradec Kr√°lov√©": {"latitude": 50.2092, "longitude": 15.8327, "timezone": "Europe/Prague"},
        "ƒåesk√© Budƒõjovice": {"latitude": 48.9745, "longitude": 14.4742, "timezone": "Europe/Prague"},
        "Pardubice": {"latitude": 50.0343, "longitude": 15.7812, "timezone": "Europe/Prague"},
        "Zl√≠n": {"latitude": 49.2233, "longitude": 17.6692, "timezone": "Europe/Prague"},
        "Hav√≠≈ôov": {"latitude": 49.7845, "longitude": 18.4373, "timezone": "Europe/Prague"},
        "Kladno": {"latitude": 50.1473, "longitude": 14.1027, "timezone": "Europe/Prague"},
        "Most": {"latitude": 50.5035, "longitude": 13.6357, "timezone": "Europe/Prague"},
        "Opava": {"latitude": 49.9387, "longitude": 17.9027, "timezone": "Europe/Prague"},
        "Fr√Ωdek-M√≠stek": {"latitude": 49.6833, "longitude": 18.3500, "timezone": "Europe/Prague"},
        "Karvin√°": {"latitude": 49.8540, "longitude": 18.5470, "timezone": "Europe/Prague"},
        "Jihlava": {"latitude": 49.3960, "longitude": 15.5915, "timezone": "Europe/Prague"},
        "Teplice": {"latitude": 50.6404, "longitude": 13.8245, "timezone": "Europe/Prague"},
        "Dƒõƒç√≠n": {"latitude": 50.7821, "longitude": 14.2147, "timezone": "Europe/Prague"},
        "Karlovy Vary": {"latitude": 50.2327, "longitude": 12.8710, "timezone": "Europe/Prague"},
        "Jablonec nad Nisou": {"latitude": 50.7243, "longitude": 15.1712, "timezone": "Europe/Prague"},
        "Mlad√° Boleslav": {"latitude": 50.4113, "longitude": 14.9033, "timezone": "Europe/Prague"},
        "Prostƒõjov": {"latitude": 49.4718, "longitude": 17.1118, "timezone": "Europe/Prague"},
        "P≈ôerov": {"latitude": 49.4558, "longitude": 17.4509, "timezone": "Europe/Prague"},
        "ƒåesk√° L√≠pa": {"latitude": 50.6859, "longitude": 14.5373, "timezone": "Europe/Prague"},
        "T≈ôeb√≠ƒç": {"latitude": 49.2147, "longitude": 15.8820, "timezone": "Europe/Prague"},
        "Uhersk√© Hradi≈°tƒõ": {"latitude": 49.0697, "longitude": 17.4622, "timezone": "Europe/Prague"},
        "Trutnov": {"latitude": 50.5611, "longitude": 15.9127, "timezone": "Europe/Prague"},
        "Chomutov": {"latitude": 50.4607, "longitude": 13.4175, "timezone": "Europe/Prague"},
        "Kol√≠n": {"latitude": 50.0282, "longitude": 15.1998, "timezone": "Europe/Prague"},
        "Jirkov": {"latitude": 50.4997, "longitude": 13.4497, "timezone": "Europe/Prague"},
        "√öst√≠ nad Orlic√≠": {"latitude": 49.9742, "longitude": 16.3939, "timezone": "Europe/Prague"},
        "Bratislava": {"latitude": 48.1486, "longitude": 17.1077, "timezone": "Europe/Bratislava"},
        "Ko≈°ice": {"latitude": 48.7164, "longitude": 21.2611, "timezone": "Europe/Bratislava"},
        "Pre≈°ov": {"latitude": 49.0018, "longitude": 21.2393, "timezone": "Europe/Bratislava"},
        "≈Ωilina": {"latitude": 49.2231, "longitude": 18.7397, "timezone": "Europe/Bratislava"},
        "Bansk√° Bystrica": {"latitude": 48.7370, "longitude": 19.1480, "timezone": "Europe/Bratislava"},
        "Nitra": {"latitude": 48.3081, "longitude": 18.0711, "timezone": "Europe/Bratislava"},
        "Trnava": {"latitude": 48.3774, "longitude": 17.5887, "timezone": "Europe/Bratislava"},
        "Martin": {"latitude": 49.0665, "longitude": 18.9211, "timezone": "Europe/Bratislava"},
        "Trenƒç√≠n": {"latitude": 48.8946, "longitude": 18.0446, "timezone": "Europe/Bratislava"},
        "Poprad": {"latitude": 49.0615, "longitude": 20.2988, "timezone": "Europe/Bratislava"},
        "Prievidza": {"latitude": 48.7739, "longitude": 18.6270, "timezone": "Europe/Bratislava"},
        "Zvolen": {"latitude": 48.5748, "longitude": 19.1453, "timezone": "Europe/Bratislava"},
        "Pova≈æsk√° Bystrica": {"latitude": 49.1203, "longitude": 18.4148, "timezone": "Europe/Bratislava"},
        "Michalovce": {"latitude": 48.7542, "longitude": 21.9153, "timezone": "Europe/Bratislava"},
        "Spi≈°sk√° Nov√° Ves": {"latitude": 48.9483, "longitude": 20.5659, "timezone": "Europe/Bratislava"},
        "Kom√°rno": {"latitude": 47.7615, "longitude": 18.1270, "timezone": "Europe/Bratislava"},
        "Levice": {"latitude": 48.2147, "longitude": 18.6058, "timezone": "Europe/Bratislava"},
        "Humenn√©": {"latitude": 48.9394, "longitude": 21.9062, "timezone": "Europe/Bratislava"},
        "Bardejov": {"latitude": 49.2918, "longitude": 21.2733, "timezone": "Europe/Bratislava"},
        "Liptovsk√Ω Mikul√°≈°": {"latitude": 49.0833, "longitude": 19.6167, "timezone": "Europe/Bratislava"}
    }
    
    submit = st.form_submit_button("Vypoƒç√≠tat horoskop")

# Zpracov√°n√≠ formul√°≈ôe
if submit:
    # Validace vstup≈Ø
    if not validate_datetime(datum, cas):
        st.error("Neplatn√Ω form√°t data nebo ƒçasu. Pou≈æijte form√°t YYYY-MM-DD pro datum a HH:MM pro ƒças.")
        st.stop()
    
    poloha = geolokace[mesto]
    
    # Form√°tov√°n√≠ datetime pro API
    formatted_datetime = format_datetime_for_api(datum, cas)
    if not formatted_datetime:
        st.error("Chyba p≈ôi form√°tov√°n√≠ data a ƒçasu")
        st.stop()
    
    # Z√≠sk√°me astrologick√° data
    all_data = {}
    success_count = 0
    
    # Parametry pro API - pou≈æijeme p≈ôesn√© nastaven√≠ pro z√°padn√≠ astrologii
    api_params = {
        "datetime": formatted_datetime,
        "coordinates": f"{poloha['latitude']},{poloha['longitude']}",
        "ayanamsa": 1,
        "house_system": "placidus",
        "orb": "default",
        "timezone": poloha.get("timezone", "Europe/Prague")
    }
    
    # Zkus√≠me z√≠skat pozice planet
    data = call_prokerala_api("/planet-position", api_params)
    if data and "data" in data:
        all_data["/planet-position"] = data["data"]
        success_count += 1
    
    # Pauza p≈ôed dal≈°√≠m dotazem
    if success_count > 0:
        time.sleep(2)
    
    # Zkus√≠me z√≠skat detaily narozen√≠
    data = call_prokerala_api("/birth-details", api_params)
    if data and "data" in data:
        all_data["/birth-details"] = data["data"]
        success_count += 1
    
    # Zkus√≠me z√≠skat v√≠ce planet z jin√Ωch endpoint≈Ø
    time.sleep(2)
    
    # Zkus√≠me kundli endpoint pro v√≠ce planet
    data = call_prokerala_api("/kundli", api_params)
    if data and "data" in data:
        all_data["/kundli"] = data["data"]
        success_count += 1
    
    # Zobrazen√≠ z√≠skan√Ωch dat
    if success_count > 0:
        display_horoscope_results(all_data)
    else:
        st.error("Nepoda≈ôilo se z√≠skat astrologick√° data. Zkuste to znovu za chv√≠li.")

# Patiƒçka
st.markdown(
    '<div style="text-align: center; font-size: 0.9em; margin-top: 2em;">'
    'Powered by <a href="https://developer.prokerala.com/" target="_blank">Prokerala Astrology API</a>'
    '</div>',
    unsafe_allow_html=True
)
